
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { BookOpen, Calendar, Edit3, Plus, Quote, Star } from "lucide-react";
import { Link } from "react-router-dom";

interface DiaryEntry {
  id: number;
  bookTitle: string;
  bookAuthor: string;
  bookImage: string;
  date: string;
  pages: string;
  entry: string;
  quotes: string[];
  rating?: number;
  status: "reading" | "completed" | "paused";
}

const mockEntries: DiaryEntry[] = [
  {
    id: 1,
    bookTitle: "–ß–∏—Å—Ç—ã–π –∫–æ–¥",
    bookAuthor: "–†–æ–±–µ—Ä—Ç –ú–∞—Ä—Ç–∏–Ω",
    bookImage: "üìö",
    date: "2024-01-15",
    pages: "—Å—Ç—Ä. 120-150",
    entry: "–°–µ–≥–æ–¥–Ω—è –∏–∑—É—á–∞–ª –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö. –û—Å–æ–±–µ–Ω–Ω–æ –∑–∞–ø–æ–º–Ω–∏–ª—Å—è —Å–æ–≤–µ—Ç –æ —Ç–æ–º, —á—Ç–æ –∏–º—è –¥–æ–ª–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã: –ø–æ—á–µ–º—É –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ë—É–¥—É –ø—Ä–∏–º–µ–Ω—è—Ç—å —ç—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –≤ —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.",
    quotes: [
      "–ß–∏—Å—Ç—ã–π –∫–æ–¥ –ø—Ä–æ—Å—Ç –∏ —ç–ª–µ–≥–∞–Ω—Ç–µ–Ω. –ß–∏—Å—Ç—ã–π –∫–æ–¥ —á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ —Ö–æ—Ä–æ—à–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω–∞—è –ø—Ä–æ–∑–∞."
    ],
    status: "reading"
  },
  {
    id: 2,
    bookTitle: "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –≤–ª–∏—è–Ω–∏—è",
    bookAuthor: "–†–æ–±–µ—Ä—Ç –ß–∞–ª–¥–∏–Ω–∏",
    bookImage: "üß†",
    date: "2024-01-10",
    pages: "–ì–ª–∞–≤–∞ 3",
    entry: "–ò–∑—É—á–∞–ª –ø—Ä–∏–Ω—Ü–∏–ø –ø—Ä–∏–≤–µ—Ä–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫ –ª—é–¥–∏ —Å—Ç—Ä–µ–º—è—Ç—Å—è –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å–æ —Å–≤–æ–∏–º–∏ –ø—Ä–æ—à–ª—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏. –≠—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –∫–æ–º–∞–Ω–¥–æ–π.",
    quotes: [
      "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—ã–±–æ—Ä –∏–ª–∏ –∑–∞–π–º–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é, –º—ã —Å—Ç–æ–ª–∫–Ω–µ–º—Å—è —Å –ª–∏—á–Ω—ã–º –∏ –º–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω—ã–º –¥–∞–≤–ª–µ–Ω–∏–µ–º, –ø–æ–±—É–∂–¥–∞—é—â–∏–º –Ω–∞—Å –≤–µ—Å—Ç–∏ —Å–µ–±—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —ç—Ç–∏–º –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º."
    ],
    rating: 5,
    status: "completed"
  },
  {
    id: 3,
    bookTitle: "Microservices Patterns",
    bookAuthor: "Chris Richardson",
    bookImage: "üìñ",
    date: "2024-01-12",
    pages: "—Å—Ç—Ä. 45-80",
    entry: "–†–∞–∑–±–∏—Ä–∞–ª –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –º–æ–Ω–æ–ª–∏—Ç–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –û—Å–æ–±–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –ø–æ–¥—Ö–æ–¥ Domain-Driven Design –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü —Å–µ—Ä–≤–∏—Å–æ–≤. –ü–ª–∞–Ω–∏—Ä—É—é –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ –∫ –Ω–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ–µ–∫—Ç—É.",
    quotes: [],
    status: "reading"
  }
];

const Diary = () => {
  const [selectedStatus, setSelectedStatus] = useState<string>("all");
  const [isAddingEntry, setIsAddingEntry] = useState(false);

  const statusLabels = {
    all: "–í—Å–µ –∑–∞–ø–∏—Å–∏",
    reading: "–ß–∏—Ç–∞—é",
    completed: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
    paused: "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
  };

  const filteredEntries = selectedStatus === "all" 
    ? mockEntries 
    : mockEntries.filter(entry => entry.status === selectedStatus);

  const getStatusBadge = (status: string) => {
    const variants = {
      reading: "default",
      completed: "secondary",
      paused: "outline"
    };
    const labels = {
      reading: "–ß–∏—Ç–∞—é",
      completed: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
      paused: "–ü–∞—É–∑–∞"
    };
    return (
      <Badge variant={variants[status as keyof typeof variants] as any}>
        {labels[status as keyof typeof labels]}
      </Badge>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Navigation */}
      <nav className="bg-white/80 backdrop-blur-md border-b border-blue-200/50 sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <Link to="/" className="flex items-center space-x-2">
              <BookOpen className="h-8 w-8 text-blue-600" />
              <span className="text-xl font-bold text-gray-900">ReadConnect</span>
            </Link>
            <div className="flex items-center space-x-4">
              <Link to="/books">
                <Button variant="ghost">–ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥</Button>
              </Link>
              <Link to="/companies">
                <Button variant="ghost">–ö–æ–º–ø–∞–Ω–∏–∏</Button>
              </Link>
              <Link to="/profile">
                <Button variant="outline">–ü—Ä–æ—Ñ–∏–ª—å</Button>
              </Link>
            </div>
          </div>
        </div>
      </nav>

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-4xl font-bold text-gray-900 mb-2">–ú–æ–π —á–∏—Ç–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–Ω–µ–≤–Ω–∏–∫</h1>
            <p className="text-lg text-gray-600">–í–∞—à–∏ –º—ã—Å–ª–∏ –∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∞—Ö</p>
          </div>
          <Button onClick={() => setIsAddingEntry(true)}>
            <Plus className="mr-2 h-4 w-4" />
            –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å
          </Button>
        </div>

        {/* Filters */}
        <Card className="border-0 shadow-sm mb-8">
          <CardContent className="pt-6">
            <div className="flex flex-wrap gap-2">
              {Object.entries(statusLabels).map(([key, label]) => (
                <Badge
                  key={key}
                  variant={selectedStatus === key ? "default" : "outline"}
                  className="cursor-pointer hover:bg-blue-100"
                  onClick={() => setSelectedStatus(key)}
                >
                  {label}
                </Badge>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Add Entry Form */}
        {isAddingEntry && (
          <Card className="border-0 shadow-lg mb-8">
            <CardHeader>
              <CardTitle>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ</CardTitle>
              <CardDescription>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –æ –∫–Ω–∏–≥–µ</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid md:grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium mb-2 block">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏</label>
                  <input 
                    className="w-full p-2 border rounded-md" 
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"
                  />
                </div>
                <div>
                  <label className="text-sm font-medium mb-2 block">–ê–≤—Ç–æ—Ä</label>
                  <input 
                    className="w-full p-2 border rounded-md" 
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞"
                  />
                </div>
              </div>
              <div>
                <label className="text-sm font-medium mb-2 block">–°—Ç—Ä–∞–Ω–∏—Ü—ã/–ì–ª–∞–≤—ã</label>
                <input 
                  className="w-full p-2 border rounded-md" 
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç—Ä. 50-75 –∏–ª–∏ –ì–ª–∞–≤–∞ 3"
                />
              </div>
              <div>
                <label className="text-sm font-medium mb-2 block">–í–∞—à–∏ –º—ã—Å–ª–∏</label>
                <Textarea 
                  placeholder="–ß—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–º? –ö–∞–∫–∏–µ –∏–¥–µ–∏ –ø–æ–∫–∞–∑–∞–ª–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏?"
                  rows={4}
                />
              </div>
              <div className="flex justify-end space-x-2">
                <Button variant="outline" onClick={() => setIsAddingEntry(false)}>
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button onClick={() => setIsAddingEntry(false)}>
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Diary Entries */}
        <div className="space-y-6">
          {filteredEntries.map((entry) => (
            <Card key={entry.id} className="border-0 shadow-lg hover:shadow-xl transition-shadow duration-300">
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex items-start space-x-4">
                    <div className="text-4xl">{entry.bookImage}</div>
                    <div>
                      <CardTitle className="text-xl">{entry.bookTitle}</CardTitle>
                      <CardDescription className="text-base mb-2">
                        {entry.bookAuthor}
                      </CardDescription>
                      <div className="flex items-center space-x-4 text-sm text-gray-500">
                        <div className="flex items-center space-x-1">
                          <Calendar className="h-4 w-4" />
                          <span>{new Date(entry.date).toLocaleDateString('ru-RU')}</span>
                        </div>
                        <span>{entry.pages}</span>
                        {getStatusBadge(entry.status)}
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    {entry.rating && (
                      <div className="flex items-center space-x-1">
                        {[...Array(5)].map((_, i) => (
                          <Star
                            key={i}
                            className={`h-4 w-4 ${
                              i < entry.rating!
                                ? "fill-yellow-400 text-yellow-400"
                                : "text-gray-300"
                            }`}
                          />
                        ))}
                      </div>
                    )}
                    <Button size="sm" variant="ghost">
                      <Edit3 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <p className="text-gray-700 leading-relaxed">{entry.entry}</p>
                  
                  {entry.quotes.length > 0 && (
                    <div className="bg-blue-50 rounded-lg p-4 border-l-4 border-blue-400">
                      <div className="flex items-start space-x-2">
                        <Quote className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
                        <div>
                          <h4 className="font-medium text-blue-900 mb-2">–¶–∏—Ç–∞—Ç—ã</h4>
                          {entry.quotes.map((quote, index) => (
                            <blockquote key={index} className="text-blue-800 italic">
                              "{quote}"
                            </blockquote>
                          ))}
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {filteredEntries.length === 0 && (
          <div className="text-center py-12">
            <BookOpen className="h-16 w-16 text-gray-300 mx-auto mb-4" />
            <h3 className="text-xl font-medium text-gray-500 mb-2">–ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
            <p className="text-gray-400 mb-4">–ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</p>
            <Button onClick={() => setIsAddingEntry(true)}>
              <Plus className="mr-2 h-4 w-4" />
              –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};

export default Diary;
